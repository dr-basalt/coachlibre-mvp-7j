name: CI/CD Production

on:
  push:
    branches: [main]
    tags: ['v*']

env:
  REGISTRY: docker.io
  IMAGE_TAG: ${{ github.sha }}

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  build-frontend:
    needs: security-scan
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build.outputs.image }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Frontend
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./applications/astro-frontend
        push: true
        platforms: linux/amd64,linux/arm64
        tags: |
          coachlibre/astro-frontend:${{ env.IMAGE_TAG }}
          coachlibre/astro-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-backend:
    needs: security-scan
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build.outputs.image }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Backend
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./applications/payload-backend
        push: true
        platforms: linux/amd64,linux/arm64
        tags: |
          coachlibre/payload-backend:${{ env.IMAGE_TAG }}
          coachlibre/payload-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-tina-builder:
    needs: security-scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build and push TinaCMS Builder
      uses: docker/build-push-action@v5
      with:
        context: ./applications/tina-builder
        push: true
        platforms: linux/amd64,linux/arm64
        tags: |
          coachlibre/tina-builder:${{ env.IMAGE_TAG }}
          coachlibre/tina-builder:latest

  deploy-production:
    needs: [build-frontend, build-backend, build-tina-builder]
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
    
    - name: Configure kubeconfig
      run: |
        echo "${{ secrets.KUBECONFIG_PROD }}" | base64 -d > ~/.kube/config
    
    - name: Update production values
      run: |
        sed -i "s/tag: latest/tag: ${{ env.IMAGE_TAG }}/g" helm-charts/coachlibre-stack/values-production.yaml
    
    - name: Commit and push updated values
      run: |
        git config --local user.email "production@coachlibre.com"
        git config --local user.name "Production Deploy"
        git add helm-charts/coachlibre-stack/values-production.yaml
        git commit -m "ðŸš€ Deploy production ${{ env.IMAGE_TAG }}"
        git push
    
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
